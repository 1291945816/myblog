<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C语言使用PV操作实现读者-写者问题</title>
    <url>/myblog/2020/06/22/C%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8PV%E6%93%8D%E4%BD%9C%E5%AE%9E%E7%8E%B0%E8%AF%BB%E8%80%85-%E5%86%99%E8%80%85%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="开局一张图"><a href="#开局一张图" class="headerlink" title="开局一张图"></a>开局一张图</h2><p><img src="https://img-blog.csdnimg.cn/20200426214818760.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjc5MjA4OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<a id="more"></a>

<h2 id="代码一贴"><a href="#代码一贴" class="headerlink" title="代码一贴"></a>代码一贴</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P sem_wait</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V sem_post</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  writeblock &amp;writeblock_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mutex &amp;mutex_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">sem_t</span> writeblock_;</span><br><span class="line"><span class="keyword">sem_t</span> mutex_;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> readcount=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">reader_i</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    P(mutex); <span class="comment">//表示对进入人数的一个互斥信号量</span></span><br><span class="line">    readcount++;</span><br><span class="line">    <span class="comment">/*由于有了这处的判断，一来可以在读者来的时候写者不能进入阅览室</span></span><br><span class="line"><span class="comment">    二来 就是写者在写的时候，这里P操作就会得到一个负数 这样自身就被阻塞，就完成了写者写的时候读者不能够进阅览室*/</span></span><br><span class="line">    <span class="keyword">if</span>(readcount == <span class="number">1</span>)</span><br><span class="line">        P(writeblock);</span><br><span class="line">    V(mutex);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"读者开始读取书籍\n"</span>);</span><br><span class="line">    P(mutex);</span><br><span class="line">    readcount--;</span><br><span class="line">    <span class="keyword">if</span>(readcount == <span class="number">0</span>)</span><br><span class="line">        V(writeblock);</span><br><span class="line">    V(mutex);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writer_i</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    P(writeblock); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"写者修改书籍\n"</span>);</span><br><span class="line">    V(writeblock);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sem_init( writeblock,<span class="number">0</span>,<span class="number">1</span>); <span class="comment">//sem_init  的使用请自行百度</span></span><br><span class="line">    sem_init(mutex,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pthread_t</span> tid1;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid11;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid111;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid22;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid2;</span><br><span class="line"></span><br><span class="line">    pthread_create(&amp;tid2,<span class="literal">NULL</span>,writer_i,<span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;tid1,<span class="literal">NULL</span>,reader_i,<span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;tid22,<span class="literal">NULL</span>,writer_i,<span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;tid11,<span class="literal">NULL</span>,reader_i,<span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;tid111,<span class="literal">NULL</span>,reader_i,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    pthread_exit(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>分析上述程序，我们可以得知，当第一个读者来的时候，写者就被阻塞，如果接下来不断有读者来的话，就有可能出现一个极端的情况，就是写者一直在外面等待的现象，也就是饥饿现象。为了尽量避免这种情况，我们应该增加一个信号量来保证写者在等待时候，能有几率获得进去图书馆修改书籍</strong></p>
<h2 id="代码一换"><a href="#代码一换" class="headerlink" title="代码一换"></a>代码一换</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P sem_wait</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V sem_post</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  writeblock &amp;writeblock_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mutex &amp;mutex_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mutex1 &amp;mutex1_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">sem_t</span> writeblock_;</span><br><span class="line"><span class="keyword">sem_t</span> mutex_;</span><br><span class="line"><span class="keyword">sem_t</span> mutex1_;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> readcount=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">reader_i</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    P(mutex1);</span><br><span class="line">    P(mutex);</span><br><span class="line">    readcount++;</span><br><span class="line">    <span class="keyword">if</span>(readcount == <span class="number">1</span>)</span><br><span class="line">        P(writeblock);</span><br><span class="line">    V(mutex);</span><br><span class="line">    V(mutex1);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"读者开始读取书籍\n"</span>);</span><br><span class="line">    P(mutex);</span><br><span class="line">    readcount--;</span><br><span class="line">    <span class="keyword">if</span>(readcount == <span class="number">0</span>)</span><br><span class="line">        V(writeblock);</span><br><span class="line">    V(mutex);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writer_i</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    P(mutex1);</span><br><span class="line">    P(writeblock);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"写者修改书籍\n"</span>);</span><br><span class="line">    V(writeblock);</span><br><span class="line">    V(mutex1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sem_init( writeblock,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    sem_init(mutex,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    sem_init(mutex1,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">pthread_t</span> tid1;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid11;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid111;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid22;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    pthread_create(&amp;tid1,<span class="literal">NULL</span>,reader_i,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    pthread_create(&amp;tid11,<span class="literal">NULL</span>,reader_i,<span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;tid111,<span class="literal">NULL</span>,reader_i,<span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;tid2,<span class="literal">NULL</span>,reader_i,<span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;tid22,<span class="literal">NULL</span>,writer_i,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    pthread_exit(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>显然，现在写者是有更大的几率可以进去修改书籍了，不用一直傻傻等待到最后…</p>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>修改equals方法时为什么还要重写hashcode方法?</title>
    <url>/myblog/2020/06/22/%E4%BF%AE%E6%94%B9equals%E6%96%B9%E6%B3%95%E6%97%B6%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E8%A6%81%E9%87%8D%E5%86%99hashcode%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>虽然在实际开发中，我们已经使用到散列集合(如<code>HashMap</code>),或也单独学过散列（<code>Hash</code>）。但是也会有很多人像我一样，看到有些时候别人写的<code>pojo</code>中有对对象内<code>hashcode</code>函数做一个重写，这就让我重新思考为什么要这么做? 下面就让我和你一起去探索一下吧!</p>
</blockquote>
<a id="more"></a>

<h2 id="Hash是什么"><a href="#Hash是什么" class="headerlink" title="Hash是什么?"></a>Hash是什么?</h2><p>Hash就是上文说到的散列，是把任意长度的输入(又叫做预映射pre-image）通过散列算法变换成固定长度的输出，该输出就是散列值。它的理论时间复杂度是可以达到O(1),但一般来说，这个散列函数是极难设计的。说到散列值，就是通过散列函数转化出来的:</p>
<ul>
<li>如果两个散列值是不一样y(x1)!=y(x2)，那么这两个散列值的原始输入一定是不一样的。</li>
<li>如果两个散列值出现了相等，那么并不代码这两个散列值的原始输入一定是一样的，可能是属于哈希碰撞(不同关键字经过散列变换结果是一样的的现象);</li>
</ul>
<p>对于哈希函数有哪些我也不再介绍，想了解可以直接去查散列函数的。</p>
<h2 id="Hashcode作用"><a href="#Hashcode作用" class="headerlink" title="Hashcode作用"></a>Hashcode作用</h2><p>很多情况下我们也许都会用到hash表来做提高查询效率，那么这个hash表是如何提高效率的?其实就是基于上面所说的散列函数，根据设计的散列函数，我们对于每一个关键字都有唯一的散列值，那么就能够直接根据这个散列值直接就能找到元素在集合中的位置，从而获得其值，这对于集合的一个个对象进行比较来说，是提高了很多的。</p>
<p><img src="https://raw.githubusercontent.com/1291945816/Images/master/java-hash.png" alt="image-20200622213306822"></p>
<p>通过以上操作，我们很容易就能理解为啥散列技术在查询的复杂度是能达到O(1).</p>
<p>但是一般来说<code>java</code>都会内置了<code>hashcode</code>的实现,那为什么在写对象的时候，只要对<code>equals</code>进行重写，都推荐对<code>hashcode</code>进行重写呢?</p>
<p>看<code>HashCode</code>的常规协定：</p>
<blockquote>
<p>在 Java 应用程序执行期间，在同一对象上多次调用 hashCode 方法时，必须一致地返回相同的整数，前提是对象上 equals 比较中所用的信息没有被修改。从某一应用程序的一次执行到同一应用程序的另一次执行，该整数无需保持一致。<br>如果根据 equals(Object) 方法，两个对象是相等的，那么在两个对象中的每个对象上调用 hashCode 方法都必须生成相同的整数结果。<br>以下情况不 是必需的：如果根据 equals(java.lang.Object) 方法，两个对象不相等，那么在两个对象中的任一对象上调用 hashCode 方法必定会生成不同的整数结果。但是，程序员应该知道，为不相等的对象生成不同整数结果可以提高哈希表的性能。<br>实际上，由 Object 类定义的 hashCode 方法确实会针对不同的对象返回不同的整数。（这一般是通过将该对象的内部地址转换成一个整数来实现的，但是 JavaTM 编程语言不需要这种实现技巧。） </p>
</blockquote>
<blockquote>
<p>当equals方法被重写时，通常有必要重写 hashCode 方法，以维护 hashCode 方法的常规协定，该协定声明相等对象必须具有相等的哈希码。</p>
</blockquote>
<p>根据以上知道，<code>java</code>内部的一个实现是以地址来的，如果对<code>equals</code>进行重写了，也就是对象你判断相等时不再以<code>java</code>提供的方法，那么将来在使用<code>hash</code>表的时候，就会存在<code>equals</code>是相等的，但<code>hashcode</code>却是不相等的!</p>
<p>所以建议:<strong>在修改equals的方法时，记得修改hashcode方法!!!</strong></p>
<p>下面做个小例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Kilig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/6/22 21:18</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> User)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        User user = (User) o;</span><br><span class="line">        <span class="keyword">return</span> getId() == user.getId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public int hashCode() &#123;</span></span><br><span class="line"><span class="comment">//        return Objects.hash(getId());</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       User a=<span class="keyword">new</span> User();</span><br><span class="line">       User b=<span class="keyword">new</span> User();</span><br><span class="line">       a.setId(<span class="number">1</span>);</span><br><span class="line">       b.setId(<span class="number">1</span>);</span><br><span class="line">       System.out.println(a.equals(b));</span><br><span class="line">       System.out.println(a.hashCode() == b.hashCode());</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<p><img src="https://raw.githubusercontent.com/1291945816/Images/master/java-hashcode-2.png" alt="image-20200622215435015"></p>
<p>尝试将其放到<code>set</code>集合时:</p>
<p><img src="https://raw.githubusercontent.com/1291945816/Images/master/java-hashcode3.png" alt="image-20200622215803440"></p>
<p>看到这结果显然不是我们想要的，因为我两个对象相等，其```hashcode<code>也应相等,然而结果却是在不可重复的set集合中存了两个对象，所以我们做一个改进，对</code>User<code>进行重写</code>hashcode``方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> Objects.hash(getId()); <span class="comment">//使用默认的hash函数处理关键字，这里是ID，我们认为Id相等的用户其就是同一个用户</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>然后看看set的结果:</p>
<p><img src="https://raw.githubusercontent.com/1291945816/Images/master/java-hashcode4.png" alt="image-20200622220230631"></p>
<p>的确符合我们预期结果。</p>
<p>基于以上的学习，我们也基本了解为啥在修改<code>equals</code>方法时也要对<code>hashcode</code>进行修改。</p>
<p><strong>感谢你的浏览…</strong></p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>【入门】学习一波Spring MVC中的跨重定向请求传递数据(URL模板、Flash属性)</title>
    <url>/myblog/2020/06/22/%E3%80%90%E5%85%A5%E9%97%A8%E3%80%91%E5%AD%A6%E4%B9%A0%E4%B8%80%E6%B3%A2Spring%20MVC%E4%B8%AD%E7%9A%84%E8%B7%A8%E9%87%8D%E5%AE%9A%E5%90%91%E8%AF%B7%E6%B1%82%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE(URL%E6%A8%A1%E6%9D%BF%E3%80%81Flash%E5%B1%9E%E6%80%A7)/</url>
    <content><![CDATA[<h2 id="1-写在开头的话"><a href="#1-写在开头的话" class="headerlink" title="1. 写在开头的话"></a>1. 写在开头的话</h2><p>在Spring MVC中，若是在控制器方法返回的视图名称中，使用了<code>redirect:</code>前缀，那么这个String就不再是用于查找视图了，即是用于让浏览器进行重定向的路径。当发生重定向了之后，之前的请求就会被作废，请求携带的数据也会被销毁，所以该如何保证数据在重定向时保持不变呢？（小知识点:如果使用<code>forward:</code>前缀则表示转发，转发宽泛的说是同一个请求，不同的视图，所以数据不会被销毁）</p>
<p>   如果你了解过会话技术的话，你就会觉得这不是一个难题，利用会话技术就可以解决这个问题了，so easy!</p>
<p>但是在这里我们并不讨论会话技术，讨论的是:</p>
<ul>
<li>使用URL模板以路径变量和/或查询参数的形式传递数据；</li>
<li>通过flash属性发送数据</li>
</ul>
<a id="more"></a>

<h2 id="2-使用URL模板以路径变量和-或查询参数的形式传递数据"><a href="#2-使用URL模板以路径变量和-或查询参数的形式传递数据" class="headerlink" title="2.使用URL模板以路径变量和/或查询参数的形式传递数据"></a>2.使用URL模板以路径变量和/或查询参数的形式传递数据</h2><p>为了预防注入的危险，实际在开发过程中重定向不推荐如下写法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/userinfo/"</span>+user.getName();<span class="comment">//除了注入的危险，这里还会存在，如果用户名为中文的时候，会乱码</span></span><br></pre></td></tr></table></figure>

<p>而是采用占位符的方式:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">model.addAttribute(<span class="string">"username"</span>,user.getName());</span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/userinfo/&#123;username&#125;"</span>;</span><br></pre></td></tr></table></figure>

<p>采用这种方式，不安全的字符会被转义，同时你还可以增加一些额外的参数:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">model.addAttribute(<span class="string">"username"</span>,user.getName());</span><br><span class="line">model.addAttribute(<span class="string">"age"</span>,user.getAge());</span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/userinfo/&#123;username&#125;"</span>;</span><br></pre></td></tr></table></figure>



<p>如果增加的属性没有在URL中匹配到占位符，则会以查询参数的方式附加到路径中。</p>
<p>运行效果:</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEyOTE5NDU4MTYvSW1hZ2VzL21hc3Rlci9pbWFnZS0yMDIwMDUyNzIwMTEzMTQyMy5wbmc?x-oss-process=image/format,png" alt="image-20200527201131423"></p>
<h2 id="3-使用flash"><a href="#3-使用flash" class="headerlink" title="3.使用flash"></a>3.使用flash</h2><p>​        Spring通过<code>RedirectAttributes</code>来设置<code>flash</code>，使用其的好处便是你不用管理该对象的销毁，因为<code>flash</code>属性会一直携带这些数据到下一次请求，然后就消失，其实就是暂时将数据存到会话中，进行重定向之后，会从会话中取出这些数据，那么相应的会话就去掉这些数据了。</p>
<p>​        通过<code>RedirectAttributes</code>提供一组<code>addFlashAttribute()</code>方法来添加flash属性:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/register"</span>,method = RequestMethod.POST)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">processRegistration</span><span class="params">(User user, RedirectAttributes model)</span>  </span>&#123;</span><br><span class="line">      model.addFlashAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"redirect:/userinfo"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/userinfo"</span>,method = RequestMethod.GET)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">showInfo</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"userinfo"</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>html：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户信息<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">"|$&#123;user.getName()&#125;你好|"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEyOTE5NDU4MTYvSW1hZ2VzL21hc3Rlci8lRTclQTQlQkElRTglOEMlODMuZ2lm" alt="示范"></p>
<p><strong>tips:如果涉及到路径含有占位符，而占位符中的可能的字符包含中文，那么会出现重定向的地址（你在方法内返回的地址）和实际地址（重定向后浏览器的地址栏的地址）是不一样的，因为你返回的地址是被转义过了，比如:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/userinfo/%xx%xx%xx ==&gt; 浏览器地址栏看到的是 /userinfo/张三</span><br><span class="line">    这个就会导致flash属性携带的值是交给了/userinfo/%xx%xx%xx 这个请求</span><br><span class="line">    而不是交给了 /userinfo/张三这个请求，最后就会导致你在处理这个请求时拿不到flash的值</span><br><span class="line">    尽管/userinfo/%xx%xx%xx转义是得到 /userinfo/张三</span><br></pre></td></tr></table></figure>

<p>演示:</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEyOTE5NDU4MTYvSW1hZ2VzL21hc3Rlci8lRTclQTQlQkElRTglOEMlODMyLmdpZg" alt="示范2"></p>
<p>code:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/register"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">processRegistration</span><span class="params">(User user, RedirectAttributes model)</span>  </span>&#123;</span><br><span class="line">    model.addFlashAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">    model.addAttribute(<span class="string">"username"</span>,user.getName());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/userinfo/&#123;username&#125;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/userinfo/&#123;username&#125;"</span>,method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">showInfo</span><span class="params">(@PathVariable String username,Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"userinfo"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JAVA</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Spring MVC</tag>
      </tags>
  </entry>
</search>
