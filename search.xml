<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C语言使用PV操作实现读者-写者问题</title>
    <url>/myblog/2020/06/22/C%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8PV%E6%93%8D%E4%BD%9C%E5%AE%9E%E7%8E%B0%E8%AF%BB%E8%80%85-%E5%86%99%E8%80%85%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="开局一张图"><a href="#开局一张图" class="headerlink" title="开局一张图"></a>开局一张图</h2><p><img src="https://img-blog.csdnimg.cn/20200426214818760.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjc5MjA4OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<a id="more"></a>

<h2 id="代码一贴"><a href="#代码一贴" class="headerlink" title="代码一贴"></a>代码一贴</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P sem_wait</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V sem_post</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  writeblock &amp;writeblock_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mutex &amp;mutex_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">sem_t</span> writeblock_;</span><br><span class="line"><span class="keyword">sem_t</span> mutex_;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> readcount=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">reader_i</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    P(mutex); <span class="comment">//表示对进入人数的一个互斥信号量</span></span><br><span class="line">    readcount++;</span><br><span class="line">    <span class="comment">/*由于有了这处的判断，一来可以在读者来的时候写者不能进入阅览室</span></span><br><span class="line"><span class="comment">    二来 就是写者在写的时候，这里P操作就会得到一个负数 这样自身就被阻塞，就完成了写者写的时候读者不能够进阅览室*/</span></span><br><span class="line">    <span class="keyword">if</span>(readcount == <span class="number">1</span>)</span><br><span class="line">        P(writeblock);</span><br><span class="line">    V(mutex);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"读者开始读取书籍\n"</span>);</span><br><span class="line">    P(mutex);</span><br><span class="line">    readcount--;</span><br><span class="line">    <span class="keyword">if</span>(readcount == <span class="number">0</span>)</span><br><span class="line">        V(writeblock);</span><br><span class="line">    V(mutex);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writer_i</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    P(writeblock); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"写者修改书籍\n"</span>);</span><br><span class="line">    V(writeblock);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sem_init( writeblock,<span class="number">0</span>,<span class="number">1</span>); <span class="comment">//sem_init  的使用请自行百度</span></span><br><span class="line">    sem_init(mutex,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pthread_t</span> tid1;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid11;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid111;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid22;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid2;</span><br><span class="line"></span><br><span class="line">    pthread_create(&amp;tid2,<span class="literal">NULL</span>,writer_i,<span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;tid1,<span class="literal">NULL</span>,reader_i,<span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;tid22,<span class="literal">NULL</span>,writer_i,<span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;tid11,<span class="literal">NULL</span>,reader_i,<span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;tid111,<span class="literal">NULL</span>,reader_i,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    pthread_exit(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>分析上述程序，我们可以得知，当第一个读者来的时候，写者就被阻塞，如果接下来不断有读者来的话，就有可能出现一个极端的情况，就是写者一直在外面等待的现象，也就是饥饿现象。为了尽量避免这种情况，我们应该增加一个信号量来保证写者在等待时候，能有几率获得进去图书馆修改书籍</strong></p>
<h2 id="代码一换"><a href="#代码一换" class="headerlink" title="代码一换"></a>代码一换</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P sem_wait</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V sem_post</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  writeblock &amp;writeblock_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mutex &amp;mutex_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mutex1 &amp;mutex1_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">sem_t</span> writeblock_;</span><br><span class="line"><span class="keyword">sem_t</span> mutex_;</span><br><span class="line"><span class="keyword">sem_t</span> mutex1_;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> readcount=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">reader_i</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    P(mutex1);</span><br><span class="line">    P(mutex);</span><br><span class="line">    readcount++;</span><br><span class="line">    <span class="keyword">if</span>(readcount == <span class="number">1</span>)</span><br><span class="line">        P(writeblock);</span><br><span class="line">    V(mutex);</span><br><span class="line">    V(mutex1);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"读者开始读取书籍\n"</span>);</span><br><span class="line">    P(mutex);</span><br><span class="line">    readcount--;</span><br><span class="line">    <span class="keyword">if</span>(readcount == <span class="number">0</span>)</span><br><span class="line">        V(writeblock);</span><br><span class="line">    V(mutex);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writer_i</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    P(mutex1);</span><br><span class="line">    P(writeblock);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"写者修改书籍\n"</span>);</span><br><span class="line">    V(writeblock);</span><br><span class="line">    V(mutex1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sem_init( writeblock,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    sem_init(mutex,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    sem_init(mutex1,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">pthread_t</span> tid1;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid11;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid111;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid22;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    pthread_create(&amp;tid1,<span class="literal">NULL</span>,reader_i,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    pthread_create(&amp;tid11,<span class="literal">NULL</span>,reader_i,<span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;tid111,<span class="literal">NULL</span>,reader_i,<span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;tid2,<span class="literal">NULL</span>,reader_i,<span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;tid22,<span class="literal">NULL</span>,writer_i,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    pthread_exit(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>显然，现在写者是有更大的几率可以进去修改书籍了，不用一直傻傻等待到最后…</p>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
</search>
